{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/styles/main.scss?e3f0","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Util.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Types.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Reflection.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Option.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Choice.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Int32.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/lib/long.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Long.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Date.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/lib/big.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Decimal.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/RegExp.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/String.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Seq.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/MutableMap.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/MutableSet.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Array.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/List.js","webpack:///./src/Html2Feliz.fs.js","webpack:///./src/.fable/Feliz.1.16.0/Interop.fs.js","webpack:///./src/.fable/Feliz.Bulma.2.4.0/ElementBuilders.fs.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/AsyncBuilder.js","webpack:///./src/.fable/fable-library.3.0.0-nagareyama-rc-005/Async.js","webpack:///./src/.fable/Fable.Elmish.3.0.0/cmd.fs.js","webpack:///./src/.fable/Fable.Elmish.3.0.0/prelude.fs.js","webpack:///./src/.fable/Fable.Elmish.3.0.0/ring.fs.js","webpack:///./src/.fable/Fable.Elmish.3.0.0/program.fs.js","webpack:///./src/.fable/Fable.Elmish.React.3.0.1/common.fs.js","webpack:///./src/.fable/Fable.Elmish.React.3.0.1/react.fs.js","webpack:///./src/App.fs.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isArrayLike","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","getPrototypeOf","constructor","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","ObjectRef","idMap","has","set","count","WeakMap","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","Date","getTime","values","self","map","v","String","equalArraysWith","eq","equalArrays","equals","Equals","isEquatable","compareDates","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","comparePrimitives","compareArrays","comp","compareArraysWith","compare","CompareTo","isComparable","compareObjects","max","comparer","createObj","fields","obj","kv","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","Error","curry","partialApply","args","undefined","concat","seqToString","callStack","ToString","iterator","cons","entries","k","join","compareList","other","tail","res","head","this","cur","next","done","from","cases","tag","withParens","field","indexOf","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","Record","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","gen","getHashCode","getGenerics","t1","t2","getRecordElements","k1","v1","k2","v2","record_type","union_type","caseNames","list_type","generic","string_type","endsWith","some","super","NumberStyles","wasm","WebAssembly","Instance","Module","Uint8Array","e","Long","low","high","unsigned","isLong","radix","toJSON","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","substring","radixToPower","size","min","parseInt","add","multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","radixLong","div","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","numBits","op_Multiply","bytes","le","fromBytesLE","fromBytesBE","hi","lo","toBytesLE","toBytesBE","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","_a","_b","_c","dateWithOffset","dateToISOStringWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","_provider","P","cmp","NAME","INVALID","INVALID_DP","NUMERIC","nl","test","charAt","search","Big","DP","RM","dp","rm","more","xc","unshift","pop","stringify","id","z","NE","PE","isneg","yc","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","times","one","round","sqrt","toExponential","toFixed","toPrecision","sd","valueOf","_Big_","findIndex","normalize","version","Decimal","fsFormatRegExp","interpolateRegExp","isNumeric","isLessThan","substr","toHex","printf","input","cont","createPrinter","strCopy","arg","formatOnce","interpolate","_","prefix","flags","padLength","precision","formatReplacement","continuePrint","toText","sign","toLowerCase","toUpperCase","zeroFlag","minusFlag","ch","padLeft","str2","delimiter","xs","isRight","toIterator","en","hasNext","Seq","iter","makeSeq","isArrayOrBufferView","append","ys","delay","firstDone","iters","unfold","output","innerIter","hasFinished","collect","singleton","fold","acc","skip","take","truncate","fst","source","target","f_mut","state_mut","xs_mut","state","ofSeq","unitVar0","ofArrayWithTail","tail_1","col","Name","Value","Attributes","Elements","DirectInnerText","HtmlNode$reflection","formatAttribute","indent","level","attr","indentStr","classes","splitters","removeEmpty","split","arguments","splits","reg","RegExp","exec","index","lastIndex","array1","array2","length1","length2","classNames","strings","mapping","formatNode","node","line","level_1","text","nodeBlock","content","activePatternResult7984","attrs","hasAttrs","children","hasChildren","hasSingleTextChild","matchValue","$007CText$007CSingleTextChild$007CAttributes$007CChildren$007CComplex$007C","arg10","clo1","arg10_1","child","clo1_1","arg10_2","attr_1","child_1","clo1_2","htmlString","handler","current","onopentag","attributes","list","tupledArg","ontext","parents","onclosetag","name_2","pattern_matching_result","node_1","parents_1","write","reactApi","reactElement","mkAttr","Helpers_combineClasses","cn","list_1","props","Helpers_extractClasses","CancellationToken","cancelled","_id","_cancelled","_listeners","Map","listener","delete","$","addListener","removeListener","OperationCanceledError","setPrototypeOf","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","Dispose","guard","Return","Cmd_exec","dispatch","cmd","Cmd_none","console","error","targetIndex","start","fill","RingBuffer$1__Pop","__","wix","rix","items","rix$0027","matchValue_1","RingBuffer$1__Push_2B595","item","wix_1","items_1","wix$0027","items_3","this$","ix","source_2","first","step","last","rangeNumber","RingBuffer$1__doubleSize","init","update","subscribe","view","setState","syncDispatch","ProgramModule_withSetState","program","ProgramModule_view","ProgramModule_runWith","patternInput","model","rb","reentered","msg","nextMsg","msg_1","patternInput_1","model$0027","ex_1","cmd_2","render","equal","nextProps","_nextState","Common_lazyView2With","react","Program_Internal_withReactSynchronousUsing","lazyView2With","placeholderId","document","getElementById","Input","Output","Model$reflection","Msg$reflection","example","exampl2","Extensions_copyToClipboard","nodeId","querySelector","range","createRange","selectNode","getSelection","addRange","execCommand","removeAllRanges","elems_3","elms_2","elms","arg00","value_6","xs_2","xs_3","xs_4","elms_1","arg00_2","props_1","value_16","arg00_1","xs_6","xs_7","xs_8","xs_9","props_2","value_8","ev","_arg1","Children","toArray","html","_arg2","xs_11","program_2","program_1","Program_withReactSynchronous","arg_1","arg_2","initModel","newModel","ProgramModule_withConsoleTrace","ProgramModule_run"],"mappings":"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","file":"app.833cf1cbc585a28f68bb.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([20,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// extracted by mini-css-extract-plugin\nexport {};","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nlet ObjectRef = /** @class */ (() => {\n    class ObjectRef {\n        static id(o) {\n            if (!ObjectRef.idMap.has(o)) {\n                ObjectRef.idMap.set(o, ++ObjectRef.count);\n            }\n            return ObjectRef.idMap.get(o);\n        }\n    }\n    ObjectRef.idMap = new WeakMap();\n    ObjectRef.count = 0;\n    return ObjectRef;\n})();\nexport { ObjectRef };\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                const len = x.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(x[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else if (x instanceof Date) {\n                return x.getTime();\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevernt cyclic objects?\n                const hashes = Object.values(self).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function hashSafe(x) {\n    var _a;\n    return (_a = x === null || x === void 0 ? void 0 : x.GetHashCode()) !== null && _a !== void 0 ? _a : 0;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalsSafe(x, y) {\n    var _a;\n    return (_a = x === null || x === void 0 ? void 0 : x.Equals(y)) !== null && _a !== void 0 ? _a : y == null;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compareSafe(x, y) {\n    var _a;\n    return (_a = x === null || x === void 0 ? void 0 : x.CompareTo(y)) !== null && _a !== void 0 ? _a : (y == null ? 0 : -1);\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return undefined;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return undefined;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.ToString === \"function\") {\n            return x.ToString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    toJSON() { return Array.from(this); }\n    toString() { return this.ToString(); }\n    ToString() { return seqToString(this); }\n    GetHashCode() { return combineHashCodes(Array.from(this).map(structuralHash)); }\n    Equals(other) { return compareList(this, other) === 0; }\n    CompareTo(other) { return compareList(this, other); }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return this.ToString();\n    }\n    ToString() {\n        if (this.fields.length === 0) {\n            return this.name;\n        }\n        else {\n            let fields = \"\";\n            let withParens = true;\n            if (this.fields.length === 1) {\n                const field = toString(this.fields[0]);\n                withParens = field.indexOf(\" \") >= 0;\n                fields = field;\n            }\n            else {\n                fields = this.fields.map((x) => toString(x)).join(\", \");\n            }\n            return this.name + (withParens ? \" (\" : \" \") + fields + (withParens ? \")\" : \"\");\n        }\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return this.ToString(); }\n    ToString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return this.ToString(); }\n    ToString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return this.ToString();\n    }\n    ToString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toString() {\n        return this.ToString();\n    }\n    // Don't add \"Some\" for consistency with erased options\n    ToString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { Union } from \"./Types.js\";\nimport { union_type } from \"./Reflection.js\";\nimport { some } from \"./Option.js\";\n\nexport class FSharpResult$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Ok\", \"Error\"];\n    }\n}\n\nexport function FSharpResult$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\n}\n\nexport function Result_Map(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, mapping(result.fields[0]));\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport function Result_MapError(mapping, result) {\n    if (result.tag === 0) {\n        return new FSharpResult$2(0, result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, mapping(result.fields[0]));\n    }\n}\n\nexport function Result_Bind(binder, result) {\n    if (result.tag === 0) {\n        return binder(result.fields[0]);\n    }\n    else {\n        return new FSharpResult$2(1, result.fields[0]);\n    }\n}\n\nexport class FSharpChoice$2 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of2\", \"Choice2Of2\"];\n    }\n}\n\nexport function FSharpChoice$2$reflection(gen0, gen1) {\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\n}\n\nexport class FSharpChoice$3 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\n    }\n}\n\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\n}\n\nexport class FSharpChoice$4 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\n    }\n}\n\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\n}\n\nexport class FSharpChoice$5 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\n    }\n}\n\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\n}\n\nexport class FSharpChoice$6 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\n    }\n}\n\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\n}\n\nexport class FSharpChoice$7 extends Union {\n    constructor(tag, ...fields) {\n        super();\n        this.tag = (tag | 0);\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\n    }\n}\n\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\n}\n\nexport function Choice_makeChoice1Of2(x) {\n    return new FSharpChoice$2(0, x);\n}\n\nexport function Choice_makeChoice2Of2(x) {\n    return new FSharpChoice$2(1, x);\n}\n\nexport function Choice_tryValueIfChoice1Of2(x) {\n    if (x.tag === 0) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Choice_tryValueIfChoice2Of2(x) {\n    if (x.tag === 1) {\n        return some(x.fields[0]);\n    }\n    else {\n        return void 0;\n    }\n}\n\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\nexport default Long;\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return undefined;\n        }\n    };\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (_s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport Decimal from \"./Decimal.js\";\nimport Long, * as _Long from \"./Long.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// These are used for formatting and only take longs and decimals into account (no bigint)\nfunction isNumeric(x) {\n    return typeof x === \"number\" || x instanceof Long || x instanceof Decimal;\n}\nfunction isLessThan(x, y) {\n    if (x instanceof Long) {\n        return _Long.compare(x, y) < 0;\n    }\n    else if (x instanceof Decimal) {\n        return x.cmp(y) < 0;\n    }\n    else {\n        return x < y;\n    }\n}\nfunction multiply(x, y) {\n    if (x instanceof Long) {\n        return _Long.op_Multiply(x, y);\n    }\n    else if (x instanceof Decimal) {\n        return x.mul(y);\n    }\n    else {\n        return x * y;\n    }\n}\nfunction toFixed(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toFixed(dp).substr(1);\n    }\n    else {\n        return x.toFixed(dp);\n    }\n}\nfunction toPrecision(x, sd) {\n    if (x instanceof Long) {\n        return String(x) + (0).toPrecision(sd).substr(1);\n    }\n    else {\n        return x.toPrecision(sd);\n    }\n}\nfunction toExponential(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toExponential(dp).substr(1);\n    }\n    else {\n        return x.toExponential(dp);\n    }\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return _Long.toString(x.unsigned ? x : _Long.fromBytes(_Long.toBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(input, values) {\n    let i = 0;\n    return input.replace(interpolateRegExp, (_, prefix, flags, padLength, precision, format) => {\n        return formatReplacement(values[i++], prefix, flags, padLength, precision, format);\n    });\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, prefix, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return prefix ? prefix + rep : rep;\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, padLength, precision, format) => {\n        const once = formatReplacement(rep, prefix, flags, padLength, precision, format);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal.js\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long.js\";\nimport { some, value } from \"./Option.js\";\nimport { compare, equals } from \"./Util.js\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nclass Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    [Symbol.iterator]() { return new Seq(this.f); }\n    next() {\n        var _a;\n        this.iter = (_a = this.iter) !== null && _a !== void 0 ? _a : this.f();\n        return this.iter.next();\n    }\n    toString() {\n        return \"seq [\" + Array.from(this).join(\"; \") + \"]\";\n    }\n}\nfunction makeSeq(f) {\n    return new Seq(f);\n}\nfunction isArrayOrBufferView(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs);\n}\nexport function ofArray(xs) {\n    if (Array.isArray(xs)) {\n        return delay(() => xs);\n    }\n    else {\n        return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : undefined, 0));\n    }\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, undefined];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [undefined, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : undefined;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output;\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = cur.value;\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = undefined;\n                    }\n                }\n            }\n            return innerIter != null ? [output, innerIter] : undefined;\n        }, undefined);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    let cur1;\n    let cur2;\n    let c = 0;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        c = f(cur1.value, cur2.value);\n        if (c !== 0) {\n            break;\n        }\n    }\n    return (c !== 0) ? c : (cur1.done && !cur2.done) ? -1 : (!cur1.done && cur2.done) ? 1 : 0;\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return delay(() => []);\n}\nexport function singleton(y) {\n    return delay(() => [y]);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : undefined, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : undefined, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            try {\n                return empty();\n            }\n            finally {\n                finalFn();\n            }\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : undefined;\n            }\n            catch (err) {\n                return undefined;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const ar2 = isArrayOrBufferView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? undefined : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : undefined, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return undefined;\n    }\n    if (isArrayOrBufferView(xs)) {\n        return i < xs.length ? some(xs[i]) : undefined;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return undefined;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), undefined), undefined, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), undefined), undefined, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), undefined), undefined, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), undefined), undefined, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? undefined : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return isArrayOrBufferView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : undefined;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : undefined;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), undefined] : undefined;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : undefined, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : undefined, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (isArrayOrBufferView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = isArrayOrBufferView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return undefined;\n        }, undefined);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, undefined];\n            }\n            return undefined;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? undefined : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = isArrayOrBufferView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return undefined;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return undefined;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next() {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next() {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next() {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { partialApply, equals } from \"./Util.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { format } from \"./String.js\";\n\nexport class Dictionary {\n    constructor(pairs, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-1\"] = 1;\n        const enumerator = getEnumerator(pairs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"Dictionary\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        const elems = concat(this$.hashMap.values());\n        return getEnumerator(elems);\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        let p;\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        let pattern_matching_result;\n        if (matchValue != null) {\n            if (p = matchValue, equals(p[1], item[1])) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return true;\n            }\n            case 1: {\n                return false;\n            }\n        }\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\n        if (matchValue != null) {\n            const pair = matchValue;\n            if (equals(pair[1], item[1])) {\n                const value = Dictionary__Remove_2B595(this$, item[0]);\n                void value;\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    get size() {\n        const this$ = this;\n        return Dictionary__get_Count(this$) | 0;\n    }\n    clear() {\n        const this$ = this;\n        Dictionary__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return Dictionary__Remove_2B595(this$, k);\n    }\n    entries() {\n        const this$ = this;\n        return map((p) => [p[0], p[1]], this$);\n    }\n    get(k) {\n        const this$ = this;\n        return Dictionary__get_Item_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return Dictionary__ContainsKey_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((p) => p[0], this$);\n    }\n    set(k, v) {\n        const this$ = this;\n        Dictionary__set_Item_5BDDA1(this$, k, v);\n        return this$;\n    }\n    values() {\n        const this$ = this;\n        return map((p) => p[1], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((p) => {\n            const clo1 = partialApply(2, f, [p[1]]);\n            const clo2 = clo1(p[0]);\n            clo2(this$);\n        }, this$);\n    }\n}\n\nexport function Dictionary$reflection(gen0, gen1) {\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\n}\n\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\n    return new Dictionary(pairs, comparer);\n}\n\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nexport function Dictionary__TryFind_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function Dictionary__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function Dictionary__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function Dictionary__get_Count(this$) {\n    const source = this$.hashMap.values();\n    return sumBy((pairs) => pairs.length, source, {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    }) | 0;\n}\n\nexport function Dictionary__get_Item_2B595(this$, k) {\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\n    if (matchValue != null) {\n        const pair = matchValue;\n        return pair[1];\n    }\n    else {\n        throw (new Error(\"The item was not found in collection\"));\n    }\n}\n\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\n            throw (new Error(msg));\n            break;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\n                void undefined;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [[k, v]]);\n            }\n            break;\n        }\n    }\n}\n\nexport function Dictionary__ContainsKey_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function Dictionary__Remove_2B595(this$, k) {\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { sumBy, iterate, map, iterateIndexed, toIterator, concat, getEnumerator } from \"./Seq.js\";\nimport { partialApply } from \"./Util.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { some } from \"./Option.js\";\n\nexport class HashSet {\n    constructor(items, comparer) {\n        const this$ = new FSharpRef(null);\n        this.comparer = comparer;\n        this$.contents = this;\n        this.hashMap = (new Map([]));\n        this[\"init@8-2\"] = 1;\n        const enumerator = getEnumerator(items);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const item = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                const value = HashSet__Add_2B595(this$.contents, item);\n                void value;\n            }\n        }\n        finally {\n            enumerator.Dispose();\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"HashSet\";\n    }\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\n        const this$ = this;\n        return getEnumerator(this$);\n    }\n    GetEnumerator() {\n        const this$ = this;\n        const elems = concat(this$.hashMap.values());\n        return getEnumerator(elems);\n    }\n    [Symbol.iterator]() {\n        return toIterator(this.GetEnumerator());\n    }\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, item);\n        void value;\n    }\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, item);\n    }\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\n        const this$ = this;\n        iterateIndexed((i, e) => {\n            array[arrayIndex + i] = e;\n        }, this$);\n    }\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\n        return false;\n    }\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, item);\n    }\n    get size() {\n        const this$ = this;\n        return HashSet__get_Count(this$) | 0;\n    }\n    add(k) {\n        const this$ = this;\n        const value = HashSet__Add_2B595(this$, k);\n        void value;\n        return this$;\n    }\n    clear() {\n        const this$ = this;\n        HashSet__Clear(this$);\n    }\n    delete(k) {\n        const this$ = this;\n        return HashSet__Remove_2B595(this$, k);\n    }\n    has(k) {\n        const this$ = this;\n        return HashSet__Contains_2B595(this$, k);\n    }\n    keys() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    values() {\n        const this$ = this;\n        return map((x) => x, this$);\n    }\n    entries() {\n        const this$ = this;\n        return map((v) => [v, v], this$);\n    }\n    forEach(f, thisArg) {\n        const this$ = this;\n        iterate((x) => {\n            const clo1 = partialApply(2, f, [x]);\n            const clo2 = clo1(x);\n            clo2(this$);\n        }, this$);\n    }\n}\n\nexport function HashSet$reflection(gen0) {\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\n}\n\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\n    return new HashSet(items, comparer);\n}\n\nfunction HashSet__TryFindIndex_2B595(this$, k) {\n    const h = this$.comparer.GetHashCode(k) | 0;\n    let matchValue;\n    let outArg = null;\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\n    }\n    else {\n        return [false, h, -1];\n    }\n}\n\nfunction HashSet__TryFind_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\n        }\n        case 1: {\n            return void 0;\n        }\n    }\n}\n\nexport function HashSet__get_Comparer(this$) {\n    return this$.comparer;\n}\n\nexport function HashSet__Clear(this$) {\n    this$.hashMap.clear();\n}\n\nexport function HashSet__get_Count(this$) {\n    const source = this$.hashMap.values();\n    return sumBy((pairs) => pairs.length, source, {\n        GetZero: () => 0,\n        Add: (x, y) => (x + y),\n    }) | 0;\n}\n\nexport function HashSet__Add_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return false;\n        }\n        case 1: {\n            if (matchValue[0]) {\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\n                void undefined;\n                return true;\n            }\n            else {\n                this$.hashMap.set(matchValue[1], [k]);\n                return true;\n            }\n        }\n    }\n}\n\nexport function HashSet__Contains_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\nexport function HashSet__Remove_2B595(this$, k) {\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\n    let pattern_matching_result;\n    if (matchValue[0]) {\n        if (matchValue[2] > -1) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n    }\n    else {\n        pattern_matching_result = 1;\n    }\n    switch (pattern_matching_result) {\n        case 0: {\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\n            return true;\n        }\n        case 1: {\n            return false;\n        }\n    }\n}\n\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, compare, comparePrimitives, max as max_1 } from \"./Util.js\";\nimport { Dictionary } from \"./MutableMap.js\";\nimport { addToDict, addToSet, getItemFromDict, tryGetValue } from \"./MapUtil.js\";\nimport { FSharpRef } from \"./Types.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { iterate as iterate_1 } from \"./Seq.js\";\n\nfunction indexNotFound() {\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\n}\n\nfunction differentLengths() {\n    throw (new Error(\"Arrays had different lengths\"));\n}\n\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new (cons || Array)((len1 + len2));\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\n\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\n\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\n\nexport function last(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    return array[array.length - 1];\n}\n\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\n\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = new (cons || Array)(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\n\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = new (cons || Array)(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\n\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\n\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw (new Error(\"Arrays had different lengths\"));\n    }\n    const result = new (cons || Array)(source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\n\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = new (cons || Array)(matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = new (cons || Array)(matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\n\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\n\nexport function truncate(count, array) {\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\n    const start = 0;\n    return array.slice(start, (start + count_1));\n}\n\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0: {\n            return new (cons || Array)(0);\n        }\n        case 1: {\n            return arrays_1[0];\n        }\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = (totalLength + arr_1.length);\n            }\n            const result = new (cons || Array)(totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = (totalIdx + 1);\n                }\n            }\n            return result;\n        }\n    }\n}\n\nexport function collect(mapping, array, cons) {\n    const mapped = map(mapping, array, null);\n    return concat(mapped, cons);\n}\n\nexport function countBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const value = array[idx];\n        const key = projection(value);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v) => {\n            outArg = v;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            const value_1 = keys.push(key);\n            void value_1;\n        }\n    }\n    const result = map((key_1) => [key_1, getItemFromDict(dict, key_1)], keys, null);\n    return result;\n}\n\nexport function distinctBy(projection, array, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => {\n        const arg00 = projection(arg);\n        return addToSet(arg00, hashSet);\n    }, array);\n}\n\nexport function distinct(array, eq) {\n    return distinctBy((x) => x, array, eq);\n}\n\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\n\nexport function contains(value, array, eq) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return false;\n            }\n            else if (eq.Equals(value, array[i])) {\n                return true;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (array.length === 0) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return array.filter(((arg00) => addToSet(arg00, cached)));\n    }\n}\n\nexport function groupBy(projection, array, eq) {\n    const dict = new Dictionary([], eq);\n    const keys = [];\n    for (let idx = 0; idx <= (array.length - 1); idx++) {\n        const v = array[idx];\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            void (matchValue[1].push(v));\n        }\n        else {\n            addToDict(dict, key, [v]);\n            const value = keys.push(key);\n            void value;\n        }\n    }\n    const result = map((key_1) => [key_1, Array.from(getItemFromDict(dict, key_1))], keys, null);\n    return result;\n}\n\nexport function empty(cons) {\n    return new (cons || Array)(0);\n}\n\nexport function singleton(value, cons) {\n    const ar = new (cons || Array)(1);\n    ar[0] = value;\n    return ar;\n}\n\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = new (cons || Array)(count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\n\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\n\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    const result = new (cons || Array)(count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\n\nexport function copy(array) {\n    return array.slice();\n}\n\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\n\nexport function scan(folder, state, array, cons) {\n    const res = new (cons || Array)((array.length + 1));\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\n\nexport function scanBack(folder, array, state, cons) {\n    const res = new (cons || Array)((array.length + 1));\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\n\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === array.length) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === array.length) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\n\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\n    }\n    if (count > array.length) {\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\n    }\n    if (count === 0) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const start = 0;\n        return array.slice(start, (start + count));\n    }\n}\n\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) ? predicate(array[count]) : false) {\n        count = (count + 1);\n    }\n    if (count === 0) {\n        return new (cons || Array)(0);\n    }\n    else {\n        const start = 0;\n        const count_1 = count | 0;\n        return array.slice(start, (start + count_1));\n    }\n}\n\nexport function addInPlace(x, array) {\n    const value = array.push(x);\n    void value;\n}\n\nexport function addRangeInPlace(range, array) {\n    iterate_1((x) => {\n        const value = array.push(x);\n        void value;\n    }, range);\n}\n\nexport function removeInPlace(item_1, array) {\n    const i = array.indexOf(item_1, 0);\n    if (i > -1) {\n        const value = array.splice(i, 1);\n        void value;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = array.findIndex(predicate);\n        if (i > -1) {\n            const value = array.splice(i, 1);\n            void value;\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\n\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    const diff = (targetIndex - sourceIndex) | 0;\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\n        target[i + diff] = source[i];\n    }\n}\n\nexport function indexOf(array, item_1, start, count) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const i = array.indexOf(item_1, start_1);\n    if ((count != null) ? (i >= (start_1 + count)) : false) {\n        return -1;\n    }\n    else {\n        return i | 0;\n    }\n}\n\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = new (cons || Array)(len);\n    const res2 = new (cons || Array)(len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = (iTrue + 1);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = (iFalse + 1);\n        }\n    }\n    return [(truncate(iTrue, res1)), (truncate(iFalse, res2))];\n}\n\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        const res = value_2(matchValue);\n        return res;\n    }\n}\n\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\n\nexport function findIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        return indexNotFound() | 0;\n    }\n}\n\nexport function tryFindIndex(predicate, array) {\n    const matchValue = array.findIndex(predicate);\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    const res = value_2(matchValue);\n                    return res;\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\n\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound() | 0;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\n\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop:\n        while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\n\nexport function choose(chooser, array, cons) {\n    const arr = array.filter(((x) => {\n        const option = chooser(x);\n        return option != null;\n    }));\n    return map((x_1) => {\n        const option_1 = chooser(x_1);\n        return value_2(option_1);\n    }, arr, cons);\n}\n\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\n}\n\nexport function fold(folder, state, array) {\n    return array.reduce((folder), state);\n}\n\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\n\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\n\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\n\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\n\nexport function isEmpty(array) {\n    return array.length === 0;\n}\n\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\n\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw (new Error(\"Not a valid permutation\"));\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    let isValid;\n    isValid = (checkFlags.every(((y) => (1 === y))));\n    if (!isValid) {\n        throw (new Error(\"Not a valid permutation\"));\n    }\n    return res;\n}\n\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, 0) | 0;\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\n\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n}\n\nexport function sortInPlace(xs, comparer) {\n    xs.sort(((x, y) => comparer.Compare(x, y)));\n}\n\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\n    return xs_1;\n}\n\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n    return xs_1;\n}\n\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\n    return xs_1;\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\n    return xs_1;\n}\n\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\n\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop:\n        while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = matchValue[0];\n                const s = matchValue[1];\n                const value = res.push(x);\n                void value;\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\n\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\n\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\n\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\n\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\n\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\n            const start = (x * chunkSize) | 0;\n            let slice;\n            const start_1 = start | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            const value = result.push(slice);\n            void value;\n        }\n        return result;\n    }\n}\n\nexport function splitAt(index, array) {\n    let start;\n    if (index < 0) {\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: index\"));\n    }\n    if (index > array.length) {\n        throw (new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\"));\n    }\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\n}\n\nexport function compareWith(comparer, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (array2 == null) {\n        return 1;\n    }\n    else {\n        let i = 0;\n        let result = 0;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return 1;\n        }\n        else if (length1 < length2) {\n            return -1;\n        }\n        else {\n            while ((i < length1) ? (result === 0) : false) {\n                result = comparer(array1[i], array2[i]);\n                i = (i + 1);\n            }\n            return result | 0;\n        }\n    }\n}\n\nexport function equalsWith(comparer, array1, array2) {\n    return compareWith(compare, array1, array2) === 0;\n}\n\nexport function exactlyOne(array) {\n    if (array.length === 1) {\n        return array[0];\n    }\n    else if (array.length === 0) {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\n    }\n    else {\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\n    }\n}\n\nexport function head(array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    else {\n        return array[0];\n    }\n}\n\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\n\nexport function tail(array) {\n    if (array.length === 0) {\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\n    }\n    return array.slice(1);\n}\n\nexport function item(index, array) {\n    return array[index];\n}\n\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\n\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\n}\n\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\n}\n\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw (new Error(\"Arrays have different lengths\"));\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\n\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\n\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\n\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\n\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\n\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\"));\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\n\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc ? predicate(x, y) : false), true, array1, array2);\n}\n\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset:\n    while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\n\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\n\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2:\n    while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\n\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\n\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\n\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res;\n    const len = max_1(comparePrimitives, 0, source.length - windowSize) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\n\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            const start = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\n            let slice;\n            const start_1 = start | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            const value = result.push(slice);\n            void value;\n        }\n        return result;\n    }\n}\n\nexport function transpose(arrays, cons) {\n    let value;\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const firstArray = arrays_1[0];\n        const lenInner = firstArray.length | 0;\n        if (value = (forAll((a) => (a.length === lenInner), arrays_1)), (!value)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = (new (cons || Array)(len));\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\n\n","import { List } from \"./Types.js\";\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\nimport { FSharpRef, List as List_1 } from \"./Types.js\";\nimport { transpose as transpose_1, pairwise as pairwise_1, collect as collect_1, scanBack as scanBack_1, scan as scan_1, foldBack2 as foldBack2_1, fold2 as fold2_1, fold as fold_1, map as map_1 } from \"./Seq.js\";\nimport { uncurry, count } from \"./Util.js\";\nimport { splitInto as splitInto_1, chunkBySize as chunkBySize_1, permute as permute_1, findIndexBack as findIndexBack_1, tryFindIndexBack as tryFindIndexBack_1 } from \"./Array.js\";\nimport { HashSet } from \"./MutableSet.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet } from \"./MapUtil.js\";\nimport { Dictionary } from \"./MutableMap.js\";\n\nexport function empty() {\n    return new List();\n}\n\nexport function singleton(x) {\n    return new List(x, empty());\n}\n\nexport function cons(x, xs) {\n    return new List(x, xs);\n}\n\nexport function head(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.head;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function tryHead(_arg1) {\n    if (_arg1.tail != null) {\n        return some(_arg1.head);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function tail(_arg1) {\n    if (_arg1.tail != null) {\n        return _arg1.tail;\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function last(_arg1_mut) {\n    last:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return _arg1.head;\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue last;\n            }\n        }\n        else {\n            throw (new Error(\"List was empty\"));\n        }\n        break;\n    }\n}\n\nexport function tryLast(_arg1_mut) {\n    tryLast:\n    while (true) {\n        const _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (_arg1.tail.tail == null) {\n                return some(_arg1.head);\n            }\n            else {\n                _arg1_mut = _arg1.tail;\n                continue tryLast;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function compareWith(comparer, xs, ys) {\n    if (xs === ys) {\n        return 0;\n    }\n    else {\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop:\n            while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = [xs_1, ys_1];\n                if (matchValue[0].tail != null) {\n                    if (matchValue[1].tail != null) {\n                        const matchValue_1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n                        if (matchValue_1 === 0) {\n                            xs_1_mut = matchValue[0].tail;\n                            ys_1_mut = matchValue[1].tail;\n                            continue loop;\n                        }\n                        else {\n                            return matchValue_1 | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue[1].tail == null) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n                break;\n            }\n        };\n        return loop(xs, ys) | 0;\n    }\n}\n\nexport function foldIndexedAux(f_mut, i_mut, acc_mut, _arg1_mut) {\n    foldIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            f_mut = f;\n            i_mut = (i + 1);\n            acc_mut = f(i, acc, _arg1.head);\n            _arg1_mut = _arg1.tail;\n            continue foldIndexedAux;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\n\nexport function foldIndexed(f, state, xs) {\n    return foldIndexedAux(f, 0, state, xs);\n}\n\nexport function fold(f_mut, state_mut, xs_mut) {\n    fold:\n    while (true) {\n        const f = f_mut, state = state_mut, xs = xs_mut;\n        if (xs.tail != null) {\n            f_mut = f;\n            state_mut = f(state, xs.head);\n            xs_mut = xs.tail;\n            continue fold;\n        }\n        else {\n            return state;\n        }\n        break;\n    }\n}\n\nexport function reverse(xs) {\n    return fold((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n}\n\nexport function foldBack(f, xs, state) {\n    return fold((acc, x) => f(x, acc), state, reverse(xs));\n}\n\nexport function toSeq(xs) {\n    return map_1((x) => x, xs);\n}\n\nexport function ofSeq(xs) {\n    const xs_1 = fold_1((acc, x) => (new List_1(x, acc)), new List_1(), xs);\n    return reverse(xs_1);\n}\n\nexport function concat(lists) {\n    const xs_1 = fold_1((state, xs) => fold((acc, x) => (new List_1(x, acc)), state, xs), new List_1(), lists);\n    return reverse(xs_1);\n}\n\nexport function foldIndexed2Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut) {\n    foldIndexed2Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y);\n                bs_mut = xs;\n                cs_mut = ys;\n                continue foldIndexed2Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed2(f, state, xs, ys) {\n    return foldIndexed2Aux(f, 0, state, xs, ys);\n}\n\nexport function fold2(f, state, xs, ys) {\n    return fold2_1(f, state, xs, ys);\n}\n\nexport function foldBack2(f, xs, ys, state) {\n    return foldBack2_1(f, xs, ys, state);\n}\n\nexport function unfold(f, state) {\n    const unfoldInner = (acc_mut, state_1_mut) => {\n        unfoldInner:\n        while (true) {\n            const acc = acc_mut, state_1 = state_1_mut;\n            const matchValue = f(state_1);\n            if (matchValue != null) {\n                const x = matchValue[0];\n                const state_2 = matchValue[1];\n                acc_mut = (new List_1(x, acc));\n                state_1_mut = state_2;\n                continue unfoldInner;\n            }\n            else {\n                return reverse(acc);\n            }\n            break;\n        }\n    };\n    return unfoldInner(new List_1(), state);\n}\n\nexport function foldIndexed3Aux(f_mut, i_mut, acc_mut, bs_mut, cs_mut, ds_mut) {\n    foldIndexed3Aux:\n    while (true) {\n        const f = f_mut, i = i_mut, acc = acc_mut, bs = bs_mut, cs = cs_mut, ds = ds_mut;\n        const matchValue = [bs, cs, ds];\n        let pattern_matching_result, x, xs, y, ys, z, zs;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                if (matchValue[2].tail != null) {\n                    pattern_matching_result = 1;\n                    x = matchValue[0].head;\n                    xs = matchValue[0].tail;\n                    y = matchValue[1].head;\n                    ys = matchValue[1].tail;\n                    z = matchValue[2].head;\n                    zs = matchValue[2].tail;\n                }\n                else {\n                    pattern_matching_result = 2;\n                }\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            if (matchValue[2].tail == null) {\n                pattern_matching_result = 0;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return acc;\n            }\n            case 1: {\n                f_mut = f;\n                i_mut = (i + 1);\n                acc_mut = f(i, acc, x, y, z);\n                bs_mut = xs;\n                cs_mut = ys;\n                ds_mut = zs;\n                continue foldIndexed3Aux;\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function foldIndexed3(f, seed, xs, ys, zs) {\n    return foldIndexed3Aux(f, 0, seed, xs, ys, zs);\n}\n\nexport function fold3(f, state, xs, ys, zs) {\n    return foldIndexed3((_arg1, acc, x, y, z) => f(acc, x, y, z), state, xs, ys, zs);\n}\n\nexport function scan(f, state, xs) {\n    const xs_1 = scan_1(f, state, xs);\n    return ofSeq(xs_1);\n}\n\nexport function scanBack(f, xs, state) {\n    const xs_1 = scanBack_1(f, xs, state);\n    return ofSeq(xs_1);\n}\n\nexport function length(xs) {\n    return fold((acc, _arg1) => (acc + 1), 0, xs);\n}\n\nexport function append(xs, ys) {\n    return fold((acc, x) => (new List_1(x, acc)), ys, reverse(xs));\n}\n\nexport function collect(f, xs) {\n    const xs_1 = collect_1(f, xs);\n    return ofSeq(xs_1);\n}\n\nexport function map(f, xs) {\n    const xs_1 = fold((acc, x) => (new List_1(f(x), acc)), new List_1(), xs);\n    return reverse(xs_1);\n}\n\nexport function mapIndexed(f, xs) {\n    const xs_1 = foldIndexed((i, acc, x) => (new List_1(f(i, x), acc)), new List_1(), xs);\n    return reverse(xs_1);\n}\n\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\n\nexport function map2(f, xs, ys) {\n    const xs_1 = fold2((acc, x, y) => (new List_1(f(x, y), acc)), new List_1(), xs, ys);\n    return reverse(xs_1);\n}\n\nexport function mapIndexed2(f, xs, ys) {\n    const xs_1 = foldIndexed2((i, acc, x, y) => (new List_1(f(i, x, y), acc)), new List_1(), xs, ys);\n    return reverse(xs_1);\n}\n\nexport function map3(f, xs, ys, zs) {\n    const xs_1 = fold3((acc, x, y, z) => (new List_1(f(x, y, z), acc)), new List_1(), xs, ys, zs);\n    return reverse(xs_1);\n}\n\nexport function mapIndexed3(f, xs, ys, zs) {\n    const xs_1 = foldIndexed3((i, acc, x, y, z) => (new List_1(f(i, x, y, z), acc)), new List_1(), xs, ys, zs);\n    return reverse(xs_1);\n}\n\nexport function mapFold(f, s, xs) {\n    const patternInput_1 = fold((tupledArg, x) => {\n        const patternInput = f(tupledArg[1], x);\n        return [new List_1(patternInput[0], tupledArg[0]), patternInput[1]];\n    }, [new List_1(), s], xs);\n    return [reverse(patternInput_1[0]), patternInput_1[1]];\n}\n\nexport function mapFoldBack(f, xs, s) {\n    return mapFold((s_1, v) => f(v, s_1), s, reverse(xs));\n}\n\nexport function iterate(f, xs) {\n    fold((unitVar0, x) => {\n        f(x);\n    }, void 0, xs);\n}\n\nexport function iterate2(f, xs, ys) {\n    fold2((unitVar0, x, y) => {\n        f(x, y);\n    }, void 0, xs, ys);\n}\n\nexport function iterateIndexed(f, xs) {\n    foldIndexed((i, unitVar1, x) => {\n        f(i, x);\n    }, void 0, xs);\n}\n\nexport function iterateIndexed2(f, xs, ys) {\n    foldIndexed2((i, unitVar1, x, y) => {\n        f(i, x, y);\n    }, void 0, xs, ys);\n}\n\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = count(xs) - 1; i >= 0; i--) {\n        res = (new List_1(xs[i], res));\n    }\n    return res;\n}\n\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, new List_1());\n}\n\nexport function isEmpty(_arg1) {\n    if (_arg1.tail == null) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nexport function tryPickIndexedAux(f_mut, i_mut, _arg1_mut) {\n    tryPickIndexedAux:\n    while (true) {\n        const f = f_mut, i = i_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            const result = f(i, _arg1.head);\n            if (result == null) {\n                f_mut = f;\n                i_mut = (i + 1);\n                _arg1_mut = _arg1.tail;\n                continue tryPickIndexedAux;\n            }\n            else {\n                return result;\n            }\n        }\n        else {\n            return void 0;\n        }\n        break;\n    }\n}\n\nexport function tryPickIndexed(f, xs) {\n    return tryPickIndexedAux(f, 0, xs);\n}\n\nexport function tryPick(f, xs) {\n    return tryPickIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue != null) {\n        const x = value_1(matchValue);\n        return x;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function tryFindIndexed(f, xs) {\n    return tryPickIndexed((i, x) => (f(i, x) ? some(x) : (void 0)), xs);\n}\n\nexport function tryFind(f, xs) {\n    return tryPickIndexed((_arg1, x) => (f(x) ? some(x) : (void 0)), xs);\n}\n\nexport function findIndexed(f, xs) {\n    const matchValue = tryFindIndexed(f, xs);\n    if (matchValue != null) {\n        const x = value_1(matchValue);\n        return x;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function find(f, xs) {\n    return findIndexed((_arg1, x) => f(x), xs);\n}\n\nexport function findBack(f, xs) {\n    let xs_2;\n    xs_2 = reverse(xs);\n    return find(f, xs_2);\n}\n\nexport function tryFindBack(f, xs) {\n    let xs_2;\n    xs_2 = reverse(xs);\n    return tryFind(f, xs_2);\n}\n\nexport function tryFindIndex(f, xs) {\n    return tryPickIndexed((i, x) => (f(x) ? i : (void 0)), xs);\n}\n\nexport function tryFindIndexBack(f, xs) {\n    const array = Array.from(xs);\n    return tryFindIndexBack_1(f, array);\n}\n\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue != null) {\n        const x = matchValue | 0;\n        return x | 0;\n    }\n    else {\n        throw (new Error(\"List did not contain any matching elements\"));\n    }\n}\n\nexport function findIndexBack(f, xs) {\n    const array = Array.from(xs);\n    return findIndexBack_1(f, array) | 0;\n}\n\nexport function item(n, xs) {\n    return findIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function tryItem(n, xs) {\n    return tryFindIndexed((i, _arg1) => (n === i), xs);\n}\n\nexport function filter(f, xs) {\n    const xs_1 = fold((acc, x) => (f(x) ? (new List_1(x, acc)) : acc), new List_1(), xs);\n    return reverse(xs_1);\n}\n\nexport function partition(f, xs) {\n    return fold(uncurry(2, (tupledArg) => {\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        return (x) => (f(x) ? [new List_1(x, lacc), racc] : [lacc, new List_1(x, racc)]);\n    }), [new List_1(), new List_1()], reverse(xs));\n}\n\nexport function choose(f, xs) {\n    const xs_1 = fold((acc, x) => {\n        const matchValue = f(x);\n        if (matchValue == null) {\n            return acc;\n        }\n        else {\n            const y = value_1(matchValue);\n            return new List_1(y, acc);\n        }\n    }, new List_1(), xs);\n    return reverse(xs_1);\n}\n\nexport function contains(value, list, eq) {\n    const loop = (xs_mut) => {\n        loop:\n        while (true) {\n            const xs = xs_mut;\n            if (xs.tail != null) {\n                if (eq.Equals(value, xs.head)) {\n                    return true;\n                }\n                else {\n                    xs_mut = xs.tail;\n                    continue loop;\n                }\n            }\n            else {\n                return false;\n            }\n            break;\n        }\n    };\n    return loop(list);\n}\n\nexport function except(itemsToExclude, array, eq) {\n    if (isEmpty(array)) {\n        return array;\n    }\n    else {\n        const cached = new HashSet(itemsToExclude, eq);\n        return filter((arg00) => addToSet(arg00, cached), array);\n    }\n}\n\nexport function initialize(n, f) {\n    let xs = new List_1();\n    for (let i = 0; i <= (n - 1); i++) {\n        xs = (new List_1(f(i), xs));\n    }\n    return reverse(xs);\n}\n\nexport function replicate(n, x) {\n    return initialize(n, (_arg1) => x);\n}\n\nexport function reduce(f, _arg1) {\n    if (_arg1.tail != null) {\n        return fold(f, _arg1.head, _arg1.tail);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function reduceBack(f, _arg1) {\n    if (_arg1.tail != null) {\n        return foldBack(f, _arg1.tail, _arg1.head);\n    }\n    else {\n        throw (new Error(\"List was empty\"));\n    }\n}\n\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\n}\n\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\n}\n\nexport function exists(f_mut, _arg1_mut) {\n    exists:\n    while (true) {\n        const f = f_mut, _arg1 = _arg1_mut;\n        if (_arg1.tail != null) {\n            if (f(_arg1.head)) {\n                return true;\n            }\n            else {\n                f_mut = f;\n                _arg1_mut = _arg1.tail;\n                continue exists;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\n\nexport function exists2(f_mut, bs_mut, cs_mut) {\n    exists2:\n    while (true) {\n        const f = f_mut, bs = bs_mut, cs = cs_mut;\n        const matchValue = [bs, cs];\n        let pattern_matching_result, x, xs, y, ys;\n        if (matchValue[0].tail != null) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n                x = matchValue[0].head;\n                xs = matchValue[0].tail;\n                y = matchValue[1].head;\n                ys = matchValue[1].tail;\n            }\n            else {\n                pattern_matching_result = 2;\n            }\n        }\n        else if (matchValue[1].tail == null) {\n            pattern_matching_result = 0;\n        }\n        else {\n            pattern_matching_result = 2;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return false;\n            }\n            case 1: {\n                if (f(x, y)) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    bs_mut = xs;\n                    cs_mut = ys;\n                    continue exists2;\n                }\n            }\n            case 2: {\n                throw (new Error(\"Lists had different lengths\"));\n            }\n        }\n        break;\n    }\n}\n\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1])], xs, [new List_1(), new List_1()]);\n}\n\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [new List_1(tupledArg[0], tupledArg_1[0]), new List_1(tupledArg[1], tupledArg_1[1]), new List_1(tupledArg[2], tupledArg_1[2])], xs, [new List_1(), new List_1(), new List_1()]);\n}\n\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\n\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\nexport function sort(xs, comparer) {\n    let xs_2;\n    const xs_1 = Array.from(xs);\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\n    xs_2 = xs_1;\n    return ofArray(xs_2);\n}\n\nexport function sortBy(projection, xs, comparer) {\n    let xs_2;\n    const xs_1 = Array.from(xs);\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\n    xs_2 = xs_1;\n    return ofArray(xs_2);\n}\n\nexport function sortDescending(xs, comparer) {\n    let xs_2;\n    const xs_1 = Array.from(xs);\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\n    xs_2 = xs_1;\n    return ofArray(xs_2);\n}\n\nexport function sortByDescending(projection, xs, comparer) {\n    let xs_2;\n    const xs_1 = Array.from(xs);\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\n    xs_2 = xs_1;\n    return ofArray(xs_2);\n}\n\nexport function sortWith(comparer, xs) {\n    let xs_2;\n    const comparer_1 = comparer;\n    const xs_1 = Array.from(xs);\n    xs_1.sort(comparer_1);\n    xs_2 = xs_1;\n    return ofArray(xs_2);\n}\n\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\n\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\n\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\n\nexport function max(li, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), li);\n}\n\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\n\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\n\nexport function average(xs, averager) {\n    const total = fold((acc, x) => averager.Add(acc, x), averager.GetZero(), xs);\n    return averager.DivideByInt(total, length(xs));\n}\n\nexport function averageBy(f, xs, averager) {\n    const total = fold((acc, x) => averager.Add(acc, f(x)), averager.GetZero(), xs);\n    return averager.DivideByInt(total, length(xs));\n}\n\nexport function permute(f, xs) {\n    let xs_1;\n    let array;\n    array = Array.from(xs);\n    xs_1 = permute_1(f, array);\n    return ofArray(xs_1);\n}\n\nexport function chunkBySize(chunkSize, xs) {\n    let xs_3;\n    let xs_1;\n    let array;\n    array = Array.from(xs);\n    xs_1 = chunkBySize_1(chunkSize, array);\n    xs_3 = ofArray(xs_1);\n    return map(ofArray, xs_3);\n}\n\nexport function skip(i, xs) {\n    const skipInner = (i_1_mut, xs_1_mut) => {\n        skipInner:\n        while (true) {\n            const i_1 = i_1_mut, xs_1 = xs_1_mut;\n            const matchValue = [i_1, xs_1];\n            if (matchValue[0] === 0) {\n                return xs_1;\n            }\n            else if (matchValue[1].tail != null) {\n                i_1_mut = (i_1 - 1);\n                xs_1_mut = matchValue[1].tail;\n                continue skipInner;\n            }\n            else {\n                throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n            }\n            break;\n        }\n    };\n    const matchValue_1 = [i, xs];\n    if (matchValue_1[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_4, xs_4;\n        if (matchValue_1[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue_1[0] === 1) {\n            if (matchValue_1[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_4 = matchValue_1[0];\n                xs_4 = matchValue_1[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_4 = matchValue_1[0];\n            xs_4 = matchValue_1[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return xs;\n            }\n            case 1: {\n                return matchValue_1[1].tail;\n            }\n            case 2: {\n                return skipInner(i_4, xs_4);\n            }\n        }\n    }\n}\n\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile:\n    while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        let pattern_matching_result, h_1, t_1;\n        if (xs.tail != null) {\n            if (predicate(xs.head)) {\n                pattern_matching_result = 0;\n                h_1 = xs.head;\n                t_1 = xs.tail;\n            }\n            else {\n                pattern_matching_result = 1;\n            }\n        }\n        else {\n            pattern_matching_result = 1;\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                predicate_mut = predicate;\n                xs_mut = t_1;\n                continue skipWhile;\n            }\n            case 1: {\n                return xs;\n            }\n        }\n        break;\n    }\n}\n\nexport function takeSplitAux(error_mut, i_mut, acc_mut, xs_mut) {\n    takeSplitAux:\n    while (true) {\n        const error = error_mut, i = i_mut, acc = acc_mut, xs = xs_mut;\n        const matchValue = [i, xs];\n        if (matchValue[0] === 0) {\n            return [reverse(acc), xs];\n        }\n        else if (matchValue[1].tail != null) {\n            error_mut = error;\n            i_mut = (i - 1);\n            acc_mut = (new List_1(matchValue[1].head, acc));\n            xs_mut = matchValue[1].tail;\n            continue takeSplitAux;\n        }\n        else if (error) {\n            throw (new Error(\"The input sequence has an insufficient number of elements.\"));\n        }\n        else {\n            return [reverse(acc), xs];\n        }\n        break;\n    }\n}\n\nexport function take(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                const tuple = takeSplitAux(true, i_3, new List_1(), xs_1);\n                return tuple[0];\n            }\n        }\n    }\n}\n\nexport function takeWhile(predicate, xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail == null) {\n            if (predicate(xs.head)) {\n                return xs;\n            }\n            else {\n                return xs.tail;\n            }\n        }\n        else if (!predicate(xs.head)) {\n            return new List_1();\n        }\n        else {\n            return new List_1(xs.head, takeWhile(predicate, xs.tail));\n        }\n    }\n    else {\n        return xs;\n    }\n}\n\nexport function truncate(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_1;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_1 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_1 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return new List_1();\n            }\n            case 1: {\n                return new List_1(matchValue[1].head, new List_1());\n            }\n            case 2: {\n                const tuple = takeSplitAux(false, i_3, new List_1(), xs_1);\n                return tuple[0];\n            }\n        }\n    }\n}\n\nexport function splitAt(i, xs) {\n    const matchValue = [i, xs];\n    if (matchValue[0] < 0) {\n        throw (new Error(\"The input must be non-negative.\"));\n    }\n    else {\n        let pattern_matching_result, i_3, xs_2;\n        if (matchValue[0] === 0) {\n            pattern_matching_result = 0;\n        }\n        else if (matchValue[0] === 1) {\n            if (matchValue[1].tail != null) {\n                pattern_matching_result = 1;\n            }\n            else {\n                pattern_matching_result = 2;\n                i_3 = matchValue[0];\n                xs_2 = matchValue[1];\n            }\n        }\n        else {\n            pattern_matching_result = 2;\n            i_3 = matchValue[0];\n            xs_2 = matchValue[1];\n        }\n        switch (pattern_matching_result) {\n            case 0: {\n                return [new List_1(), xs];\n            }\n            case 1: {\n                return [new List_1(matchValue[1].head, new List_1()), matchValue[1].tail];\n            }\n            case 2: {\n                return takeSplitAux(true, i_3, new List_1(), xs_2);\n            }\n        }\n    }\n}\n\nexport function outOfRange() {\n    throw (new Error(\"Index out of range\"));\n}\n\nexport function getSlice(lower, upper, xs) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const hasUpper = upper != null;\n    if (lower_1 < 0) {\n        return outOfRange();\n    }\n    else if (hasUpper ? (upper < lower_1) : false) {\n        return new List_1();\n    }\n    else {\n        let lastIndex = -1;\n        let res;\n        res = foldIndexed((i, acc, x) => {\n            lastIndex = i;\n            if ((lower_1 <= i) ? ((!hasUpper) ? true : (i <= upper)) : false) {\n                return new List_1(x, acc);\n            }\n            else {\n                return acc;\n            }\n        }, new List_1(), xs);\n        if ((lower_1 > (lastIndex + 1)) ? true : (hasUpper ? (upper > lastIndex) : false)) {\n            outOfRange();\n        }\n        return reverse(res);\n    }\n}\n\nexport function distinctBy(projection, xs, eq) {\n    const hashSet = new HashSet([], eq);\n    return filter((arg) => {\n        const arg00 = projection(arg);\n        return addToSet(arg00, hashSet);\n    }, xs);\n}\n\nexport function distinct(xs, eq) {\n    return distinctBy((x) => x, xs, eq);\n}\n\nexport function exactlyOne(xs) {\n    if (xs.tail != null) {\n        if (xs.tail.tail != null) {\n            throw (new Error(\"Input list too long\\\\nParameter name: list\"));\n        }\n        else {\n            return xs.head;\n        }\n    }\n    else {\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: list\"));\n    }\n}\n\nexport function groupBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = null;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, new List_1(v, matchValue[1]));\n        }\n        else {\n            addToDict(dict, key, new List_1(v, new List_1()));\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    const xs_2 = keys;\n    iterate((key_1) => {\n        result = (new List_1([key_1, reverse(getItemFromDict(dict, key_1))], result));\n    }, xs_2);\n    return result;\n}\n\nexport function countBy(projection, xs, eq) {\n    const dict = new Dictionary([], eq);\n    let keys = new List_1();\n    iterate((v) => {\n        const key = projection(v);\n        let matchValue;\n        let outArg = 0;\n        matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v_1) => {\n            outArg = v_1;\n        })), outArg];\n        if (matchValue[0]) {\n            dict.set(key, matchValue[1] + 1);\n        }\n        else {\n            dict.set(key, 1);\n            keys = (new List_1(key, keys));\n        }\n    }, xs);\n    let result = new List_1();\n    const xs_2 = keys;\n    iterate((key_1) => {\n        result = (new List_1([key_1, getItemFromDict(dict, key_1)], result));\n    }, xs_2);\n    return result;\n}\n\nexport function where(predicate, source) {\n    return filter(predicate, source);\n}\n\nexport function pairwise(source) {\n    const xs = pairwise_1(source);\n    return ofSeq(xs);\n}\n\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw (new Error(\"windowSize must be positive\"));\n    }\n    let res = new List_1();\n    for (let i = length(source); i >= windowSize; i--) {\n        res = (new List_1(getSlice(i - windowSize, i - 1, source), res));\n    }\n    return res;\n}\n\nexport function splitInto(chunks, source) {\n    let xs_2;\n    let xs;\n    let array;\n    array = Array.from(source);\n    xs = splitInto_1(chunks, array);\n    xs_2 = ofArray(xs);\n    return map(ofArray, xs_2);\n}\n\nexport function transpose(lists) {\n    let xs_1;\n    let source_1;\n    source_1 = transpose_1(lists);\n    xs_1 = map_1(ofSeq, source_1);\n    return ofSeq(xs_1);\n}\n\n","import { Record } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { option_type, list_type, record_type, string_type } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Reflection.js\";\r\nimport { FSharpChoice$2 } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Choice.js\";\r\nimport { join, printf, interpolate, toText, split } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/String.js\";\r\nimport { map, equalsWith } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Array.js\";\r\nimport { partialApply, comparePrimitives } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { collect, map as map_1, singleton, append, delay } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Seq.js\";\r\nimport { singleton as singleton_1, append as append_1, cons, map as map_2, ofArray, empty, ofSeq } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/List.js\";\r\nimport * as htmlparser2 from \"htmlparser2\";\r\n\r\nexport class HtmlAttribute extends Record {\r\n    constructor(Name, Value) {\r\n        super();\r\n        this.Name = Name;\r\n        this.Value = Value;\r\n    }\r\n}\r\n\r\nexport function HtmlAttribute$reflection() {\r\n    return record_type(\"Html2Feliz.HtmlAttribute\", [], HtmlAttribute, () => [[\"Name\", string_type], [\"Value\", string_type]]);\r\n}\r\n\r\nexport class HtmlNode extends Record {\r\n    constructor(Name, Attributes, Elements, DirectInnerText) {\r\n        super();\r\n        this.Name = Name;\r\n        this.Attributes = Attributes;\r\n        this.Elements = Elements;\r\n        this.DirectInnerText = DirectInnerText;\r\n    }\r\n}\r\n\r\nexport function HtmlNode$reflection() {\r\n    return record_type(\"Html2Feliz.HtmlNode\", [], HtmlNode, () => [[\"Name\", string_type], [\"Attributes\", list_type(HtmlAttribute$reflection())], [\"Elements\", list_type(HtmlNode$reflection())], [\"DirectInnerText\", option_type(string_type)]]);\r\n}\r\n\r\nexport class HtmlDocument extends Record {\r\n    constructor(Elements) {\r\n        super();\r\n        this.Elements = Elements;\r\n    }\r\n}\r\n\r\nexport function HtmlDocument$reflection() {\r\n    return record_type(\"Html2Feliz.HtmlDocument\", [], HtmlDocument, () => [[\"Elements\", list_type(HtmlNode$reflection())]]);\r\n}\r\n\r\nexport function $007CText$007CSingleTextChild$007CAttributes$007CChildren$007CComplex$007C(node) {\r\n    const attrs = node.Attributes;\r\n    const hasAttrs = !(attrs.tail == null);\r\n    const children = node.Elements;\r\n    const hasChildren = !(children.tail == null);\r\n    const hasSingleTextChild = ((!hasAttrs) ? (!hasChildren) : false) ? (node.DirectInnerText != null) : false;\r\n    const name = node.Name;\r\n    if (hasSingleTextChild) {\r\n        return new FSharpChoice$2(1, [name, node.DirectInnerText]);\r\n    }\r\n    else {\r\n        const matchValue = [hasChildren, hasAttrs];\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                return new FSharpChoice$2(4, [name, attrs, children]);\r\n            }\r\n            else {\r\n                return new FSharpChoice$2(3, [name, children]);\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            return new FSharpChoice$2(2, [name, attrs]);\r\n        }\r\n        else {\r\n            return new FSharpChoice$2(0, node.DirectInnerText);\r\n        }\r\n    }\r\n}\r\n\r\nexport function formatAttribute(indent, level, attr) {\r\n    const indentStr = Array((indent * level) + 1).join(\" \");\r\n    if (attr.Name === \"class\") {\r\n        const classes = split(attr.Value, [\" \"], null, 0);\r\n        if ((!equalsWith(comparePrimitives, classes, null)) ? (classes.length === 1) : false) {\r\n            const single = classes[0];\r\n            return toText(interpolate(\"%P()prop.className \\\"%P()\\\"\", [indentStr, single]));\r\n        }\r\n        else {\r\n            let classNames;\r\n            let strings;\r\n            let mapping;\r\n            const clo1 = toText(printf(\"\\\"%s\\\"\"));\r\n            mapping = (clo1);\r\n            strings = map(mapping, classes);\r\n            classNames = join(\"; \", strings);\r\n            return toText(interpolate(\"%P()prop.className [ %P() ]\", [indentStr, classNames]));\r\n        }\r\n    }\r\n    else {\r\n        return toText(interpolate(\"%P()prop.%P() \\\"%P()\\\"\", [indentStr, attr.Name, attr.Value]));\r\n    }\r\n}\r\n\r\nexport function formatNode(indent, level, node) {\r\n    const line = (level_1, text) => toText(interpolate(\"%P()%P()\", [Array((indent * level_1) + 1).join(\" \"), text]));\r\n    const nodeBlock = (name, content) => delay(() => append(singleton(line(level, toText(interpolate(\"Html.%P() [\", [name])))), delay(() => append(content, delay(() => singleton(line(level, \"]\")))))));\r\n    return delay(() => {\r\n        const activePatternResult7984 = $007CText$007CSingleTextChild$007CAttributes$007CChildren$007CComplex$007C(node);\r\n        if (activePatternResult7984.tag === 1) {\r\n            return singleton(line(level, toText(interpolate(\"Html.%P() \\\"%P()\\\"\", [activePatternResult7984.fields[0][0], activePatternResult7984.fields[0][1]]))));\r\n        }\r\n        else if (activePatternResult7984.tag === 2) {\r\n            const arg10 = ofSeq(delay(() => map_1((attr) => formatAttribute(indent, level + 1, attr), activePatternResult7984.fields[0][1])));\r\n            const clo1 = partialApply(1, nodeBlock, [activePatternResult7984.fields[0][0]]);\r\n            return clo1(arg10);\r\n        }\r\n        else if (activePatternResult7984.tag === 3) {\r\n            const arg10_1 = ofSeq(delay(() => collect((child) => formatNode(indent, level + 1, child), activePatternResult7984.fields[0][1])));\r\n            const clo1_1 = partialApply(1, nodeBlock, [activePatternResult7984.fields[0][0]]);\r\n            return clo1_1(arg10_1);\r\n        }\r\n        else if (activePatternResult7984.tag === 4) {\r\n            const arg10_2 = ofSeq(delay(() => append(map_1((attr_1) => formatAttribute(indent, level + 1, attr_1), activePatternResult7984.fields[0][1]), delay(() => append(singleton(line(level + 1, \"prop.children [\")), delay(() => append(collect((child_1) => formatNode(indent, level + 2, child_1), activePatternResult7984.fields[0][2]), delay(() => singleton(line(level + 1, \"]\"))))))))));\r\n            const clo1_2 = partialApply(1, nodeBlock, [activePatternResult7984.fields[0][0]]);\r\n            return clo1_2(arg10_2);\r\n        }\r\n        else {\r\n            return singleton(line(level, toText(interpolate(\"Html.text \\\"%P()\\\"\", [activePatternResult7984.fields[0]]))));\r\n        }\r\n    });\r\n}\r\n\r\nexport function formatDocument(indent, html) {\r\n    return delay(() => collect((node) => formatNode(indent, 0, node), html.Elements));\r\n}\r\n\r\nexport function parse(htmlString) {\r\n    const handler = {};\r\n    let nodes = empty();\r\n    let current = empty();\r\n    handler.onopentag = ((name, attributes) => {\r\n        let attrs;\r\n        let list;\r\n        const array = Object.entries(attributes);\r\n        list = ofArray(array);\r\n        attrs = map_2((tupledArg) => (new HtmlAttribute(tupledArg[0], tupledArg[1])), list);\r\n        current = cons(new HtmlNode(name, attrs, empty(), void 0), current);\r\n    });\r\n    handler.ontext = ((text) => {\r\n        if (current.tail != null) {\r\n            const parents = current.tail;\r\n            const node = current.head;\r\n            current = cons(new HtmlNode(node.Name, node.Attributes, node.Elements, text), parents);\r\n        }\r\n    });\r\n    handler.onclosetag = ((name_2) => {\r\n        let Elements;\r\n        let pattern_matching_result, node_1, parent, parents_1;\r\n        if (current.tail != null) {\r\n            if (current.tail.tail != null) {\r\n                pattern_matching_result = 0;\r\n                node_1 = current.head;\r\n                parent = current.tail.head;\r\n                parents_1 = current.tail.tail;\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                current = cons((Elements = append_1(parent.Elements, singleton_1(node_1)), new HtmlNode(parent.Name, parent.Attributes, Elements, parent.DirectInnerText)), parents_1);\r\n                break;\r\n            }\r\n            case 1: {\r\n                break;\r\n            }\r\n        }\r\n    });\r\n    const parser = new htmlparser2.Parser(handler);\r\n    parser.write(htmlString);\r\n    return new HtmlDocument(current);\r\n}\r\n\r\n","import { createElement as createElement_1 } from \"react\";\r\nimport react from \"react\";\r\n\r\nexport const reactApi = react;\r\n\r\nexport const reactElement = createElement_1;\r\n\r\nexport function mkAttr(key, value) {\r\n    return [key, value];\r\n}\r\n\r\nexport function mkStyle(key, value) {\r\n    return [key, value];\r\n}\r\n\r\n","import { empty, cons, fold, reverse } from \"../fable-library.3.0.0-nagareyama-rc-005/List.js\";\r\nimport { uncurry } from \"../fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { toString } from \"../fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { mkAttr } from \"../Feliz.1.16.0/Interop.fs.js\";\r\nimport { join } from \"../fable-library.3.0.0-nagareyama-rc-005/String.js\";\r\n\r\nexport function Helpers_extractClasses(xs) {\r\n    let list_1;\r\n    list_1 = reverse(xs);\r\n    return fold(uncurry(2, (tupledArg) => {\r\n        const classes = tupledArg[0];\r\n        const props = tupledArg[1];\r\n        return (x) => {\r\n            const matchValue = x;\r\n            return (matchValue[0] === \"className\") ? [cons(toString(matchValue[1]), classes), props] : [classes, cons(x, props)];\r\n        };\r\n    }), [empty(), empty()], list_1);\r\n}\r\n\r\nexport function Helpers_combineClasses(cn, xs) {\r\n    let tupledArg;\r\n    tupledArg = Helpers_extractClasses(xs);\r\n    return cons((mkAttr(\"className\", join(\" \", cons(cn, tupledArg[0])))), tupledArg[1]);\r\n}\r\n\r\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { map } from \"./Seq.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.3.0.0-nagareyama-rc-005/List.js\";\r\nimport { singleton as singleton_1 } from \"../fable-library.3.0.0-nagareyama-rc-005/AsyncBuilder.js\";\r\nimport { startImmediate, catchAsync } from \"../fable-library.3.0.0-nagareyama-rc-005/Async.js\";\r\n\r\nexport function Cmd_exec(dispatch, cmd) {\r\n    iterate((sub) => {\r\n        sub(dispatch);\r\n    }, cmd);\r\n}\r\n\r\nexport function Cmd_none() {\r\n    return empty();\r\n}\r\n\r\nexport function Cmd_map(f, cmd) {\r\n    return map((g) => ((arg_1) => {\r\n        g((arg) => {\r\n            arg_1(f(arg));\r\n        });\r\n    }), cmd);\r\n}\r\n\r\nexport function Cmd_batch(cmds) {\r\n    return concat(cmds);\r\n}\r\n\r\nexport function Cmd_ofSub(sub) {\r\n    return singleton(sub);\r\n}\r\n\r\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\r\n    return singleton((dispatch) => {\r\n        try {\r\n            const arg_1 = task(arg);\r\n            return dispatch(ofSuccess(arg_1));\r\n        }\r\n        catch (x) {\r\n            return dispatch(ofError(x));\r\n        }\r\n    });\r\n}\r\n\r\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\r\n    return singleton((dispatch) => {\r\n        try {\r\n            const arg_1 = task(arg);\r\n            dispatch(ofSuccess(arg_1));\r\n        }\r\n        catch (x) {\r\n        }\r\n    });\r\n}\r\n\r\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\r\n    return singleton((dispatch) => {\r\n        try {\r\n            task(arg);\r\n        }\r\n        catch (x) {\r\n            dispatch(ofError(x));\r\n        }\r\n    });\r\n}\r\n\r\nexport function Cmd_OfFunc_result(msg) {\r\n    return singleton((dispatch) => {\r\n        dispatch(msg);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_either(task, arg, ofSuccess, ofError) {\r\n    return singleton((arg_1) => {\r\n        let arg00_1;\r\n        const builder$0040 = singleton_1;\r\n        arg00_1 = builder$0040.Delay(() => {\r\n            let arg00;\r\n            return builder$0040.Bind((arg00 = task(arg), (catchAsync(arg00))), (_arg1) => {\r\n                const r = _arg1;\r\n                arg_1((r.tag === 1) ? ofError(r.fields[0]) : ofSuccess(r.fields[0]));\r\n                return builder$0040.Zero();\r\n            });\r\n        });\r\n        startImmediate(arg00_1);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_perform(task, arg, ofSuccess) {\r\n    return singleton((arg_1) => {\r\n        let arg00_1;\r\n        const builder$0040 = singleton_1;\r\n        arg00_1 = builder$0040.Delay(() => {\r\n            let arg00;\r\n            return builder$0040.Bind((arg00 = task(arg), (catchAsync(arg00))), (_arg1) => {\r\n                const r = _arg1;\r\n                if (r.tag === 0) {\r\n                    arg_1(ofSuccess(r.fields[0]));\r\n                    return builder$0040.Zero();\r\n                }\r\n                else {\r\n                    return builder$0040.Zero();\r\n                }\r\n            });\r\n        });\r\n        startImmediate(arg00_1);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_attempt(task, arg, ofError) {\r\n    return singleton((arg_1) => {\r\n        let arg00_1;\r\n        const builder$0040 = singleton_1;\r\n        arg00_1 = builder$0040.Delay(() => {\r\n            let arg00;\r\n            return builder$0040.Bind((arg00 = task(arg), (catchAsync(arg00))), (_arg1) => {\r\n                const r = _arg1;\r\n                if (r.tag === 1) {\r\n                    arg_1(ofError(r.fields[0]));\r\n                    return builder$0040.Zero();\r\n                }\r\n                else {\r\n                    return builder$0040.Zero();\r\n                }\r\n            });\r\n        });\r\n        startImmediate(arg00_1);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfAsync_result(task) {\r\n    return singleton((arg) => {\r\n        let arg00_1;\r\n        const builder$0040 = singleton_1;\r\n        arg00_1 = builder$0040.Delay(() => builder$0040.Bind((catchAsync(task)), (_arg1) => {\r\n            const r = _arg1;\r\n            if (r.tag === 0) {\r\n                arg(r.fields[0]);\r\n                return builder$0040.Zero();\r\n            }\r\n            else {\r\n                return builder$0040.Zero();\r\n            }\r\n        }));\r\n        startImmediate(arg00_1);\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\r\n    return singleton((dispatch) => {\r\n        const value_1 = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1))).catch((arg_3) => dispatch((ofError((arg_3)))));\r\n        void value_1;\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\r\n    return singleton((dispatch) => {\r\n        const value = task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\r\n        void value;\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\r\n    return singleton((dispatch) => {\r\n        const value_1 = task(arg).catch((arg_2) => {\r\n            dispatch((ofError((arg_2))));\r\n        });\r\n        void value_1;\r\n    });\r\n}\r\n\r\nexport function Cmd_OfPromise_result(task) {\r\n    return singleton((dispatch) => {\r\n        const value = task.then(dispatch);\r\n        void value;\r\n    });\r\n}\r\n\r\nexport function Cmd_attemptFunc(task, arg, ofError) {\r\n    return Cmd_OfFunc_attempt(task, arg, ofError);\r\n}\r\n\r\n","import { some } from \"../fable-library.3.0.0-nagareyama-rc-005/Option.js\";\r\n\r\nexport function onError(text, ex) {\r\n    console.error(some(text), ex);\r\n}\r\n\r\nexport function toConsole(text, o) {\r\n    console.log(some(text), o);\r\n}\r\n\r\n","import { Union } from \"../fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { class_type, union_type, int32_type, array_type } from \"../fable-library.3.0.0-nagareyama-rc-005/Reflection.js\";\r\nimport { fill } from \"../fable-library.3.0.0-nagareyama-rc-005/Array.js\";\r\nimport { comparePrimitives, max } from \"../fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { some } from \"../fable-library.3.0.0-nagareyama-rc-005/Option.js\";\r\nimport { rangeNumber, singleton, collect, take, skip, append, delay } from \"../fable-library.3.0.0-nagareyama-rc-005/Seq.js\";\r\n\r\nexport class RingState$1 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Writable\", \"ReadWritable\"];\r\n    }\r\n}\r\n\r\nexport function RingState$1$reflection(gen0) {\r\n    return union_type(\"Elmish.RingState`1\", [gen0], RingState$1, () => [[[\"wx\", array_type(gen0)], [\"ix\", int32_type]], [[\"rw\", array_type(gen0)], [\"wix\", int32_type], [\"rix\", int32_type]]]);\r\n}\r\n\r\nexport class RingBuffer$1 {\r\n    constructor(size) {\r\n        this.state = (new RingState$1(0, fill(new Array(max(comparePrimitives, size, 10)), 0, max(comparePrimitives, size, 10), null), 0));\r\n    }\r\n}\r\n\r\nexport function RingBuffer$1$reflection(gen0) {\r\n    return class_type(\"Elmish.RingBuffer`1\", [gen0], RingBuffer$1);\r\n}\r\n\r\nexport function RingBuffer$1_$ctor_Z524259A4(size) {\r\n    return new RingBuffer$1(size);\r\n}\r\n\r\nexport function RingBuffer$1__Pop(__) {\r\n    const matchValue = __.state;\r\n    if (matchValue.tag === 1) {\r\n        const wix = matchValue.fields[1] | 0;\r\n        const rix = matchValue.fields[2] | 0;\r\n        const items = matchValue.fields[0];\r\n        const rix$0027 = ((rix + 1) % items.length) | 0;\r\n        const matchValue_1 = rix$0027 === wix;\r\n        if (matchValue_1) {\r\n            __.state = (new RingState$1(0, items, wix));\r\n        }\r\n        else {\r\n            __.state = (new RingState$1(1, items, wix, rix$0027));\r\n        }\r\n        return some(items[rix]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function RingBuffer$1__Push_2B595(__, item) {\r\n    const matchValue = __.state;\r\n    if (matchValue.tag === 1) {\r\n        const wix_1 = matchValue.fields[1] | 0;\r\n        const rix = matchValue.fields[2] | 0;\r\n        const items_1 = matchValue.fields[0];\r\n        items_1[wix_1] = item;\r\n        const wix$0027 = ((wix_1 + 1) % items_1.length) | 0;\r\n        const matchValue_1 = wix$0027 === rix;\r\n        if (matchValue_1) {\r\n            let items_3;\r\n            items_3 = RingBuffer$1__doubleSize(__, rix, items_1);\r\n            __.state = (new RingState$1(1, items_3, wix$0027, 0));\r\n        }\r\n        else {\r\n            __.state = (new RingState$1(1, items_1, wix$0027, rix));\r\n        }\r\n    }\r\n    else {\r\n        const ix = matchValue.fields[1] | 0;\r\n        const items = matchValue.fields[0];\r\n        items[ix] = item;\r\n        const wix = ((ix + 1) % items.length) | 0;\r\n        __.state = (new RingState$1(1, items, wix, ix));\r\n    }\r\n}\r\n\r\nfunction RingBuffer$1__doubleSize(this$, ix, items) {\r\n    const source_2 = delay(() => append((skip(ix, items)), delay(() => append((take(ix, items)), delay(() => collect((matchValue) => singleton(null), rangeNumber(0, 1, items.length)))))));\r\n    return Array.from(source_2);\r\n}\r\n\r\n","import { Record } from \"../fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { record_type, class_type, string_type, tuple_type, list_type, lambda_type, unit_type } from \"../fable-library.3.0.0-nagareyama-rc-005/Reflection.js\";\r\nimport { Cmd_exec, Cmd_batch, Cmd_none } from \"./cmd.fs.js\";\r\nimport { toConsole, onError as onError_1 } from \"./prelude.fs.js\";\r\nimport { curry, partialApply, uncurry } from \"../fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { append, ofArray } from \"../fable-library.3.0.0-nagareyama-rc-005/List.js\";\r\nimport { RingBuffer$1__Pop, RingBuffer$1__Push_2B595, RingBuffer$1_$ctor_Z524259A4 } from \"./ring.fs.js\";\r\nimport { value as value_1, some } from \"../fable-library.3.0.0-nagareyama-rc-005/Option.js\";\r\nimport { printf, toText } from \"../fable-library.3.0.0-nagareyama-rc-005/String.js\";\r\n\r\nexport class Program$4 extends Record {\r\n    constructor(init, update, subscribe, view, setState, onError, syncDispatch) {\r\n        super();\r\n        this.init = init;\r\n        this.update = update;\r\n        this.subscribe = subscribe;\r\n        this.view = view;\r\n        this.setState = setState;\r\n        this.onError = onError;\r\n        this.syncDispatch = syncDispatch;\r\n    }\r\n}\r\n\r\nexport function Program$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return record_type(\"Elmish.Program`4\", [gen0, gen1, gen2, gen3], Program$4, () => [[\"init\", lambda_type(gen0, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type))))], [\"update\", lambda_type(gen2, lambda_type(gen1, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type)))))], [\"subscribe\", lambda_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type)))], [\"view\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), gen3))], [\"setState\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), unit_type))], [\"onError\", lambda_type(tuple_type(string_type, class_type(\"System.Exception\")), unit_type)], [\"syncDispatch\", lambda_type(lambda_type(gen2, unit_type), lambda_type(gen2, unit_type))]]);\r\n}\r\n\r\nexport function ProgramModule_mkProgram(init, update, view) {\r\n    return new Program$4(init, update, (_arg1) => Cmd_none(), view, (model, arg) => {\r\n        const value = view(model, arg);\r\n        void value;\r\n    }, (tupledArg) => {\r\n        onError_1(tupledArg[0], tupledArg[1]);\r\n    }, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_mkSimple(init, update, view) {\r\n    return new Program$4((arg) => {\r\n        const state = init(arg);\r\n        return [state, Cmd_none()];\r\n    }, (msg, arg_1) => {\r\n        const state_1 = update(msg, arg_1);\r\n        return [state_1, Cmd_none()];\r\n    }, (_arg1) => Cmd_none(), view, (model, arg_2) => {\r\n        const value = view(model, arg_2);\r\n        void value;\r\n    }, (tupledArg) => {\r\n        onError_1(tupledArg[0], tupledArg[1]);\r\n    }, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_withSubscription(subscribe, program) {\r\n    return new Program$4(program.init, program.update, (model) => Cmd_batch(ofArray([program.subscribe(model), subscribe(model)])), program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withConsoleTrace(program) {\r\n    return new Program$4((arg) => {\r\n        const patternInput = program.init(arg);\r\n        const initModel = patternInput[0];\r\n        toConsole(\"Initial state:\", initModel);\r\n        return [initModel, patternInput[1]];\r\n    }, (msg, model) => {\r\n        toConsole(\"New message:\", msg);\r\n        const patternInput_1 = program.update(msg, model);\r\n        const newModel = patternInput_1[0];\r\n        toConsole(\"Updated state:\", newModel);\r\n        return [newModel, patternInput_1[1]];\r\n    }, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withTrace(trace, program) {\r\n    return new Program$4(program.init, (msg, model) => {\r\n        trace(msg, model);\r\n        return program.update(msg, model);\r\n    }, program.subscribe, program.view, program.setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withErrorHandler(onError, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_mapErrorHandler(map, program) {\r\n    const onError = partialApply(1, map, [program.onError]);\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_withSetState(setState, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, setState, program.onError, program.syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_setState(program) {\r\n    return curry(2, program.setState);\r\n}\r\n\r\nexport function ProgramModule_view(program) {\r\n    return curry(2, program.view);\r\n}\r\n\r\nexport function ProgramModule_withSyncDispatch(syncDispatch, program) {\r\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, program.onError, syncDispatch);\r\n}\r\n\r\nexport function ProgramModule_map(mapInit, mapUpdate, mapView, mapSetState, mapSubscribe, program) {\r\n    const init = partialApply(1, mapInit, [program.init]);\r\n    const update = partialApply(2, mapUpdate, [program.update]);\r\n    const view = partialApply(2, mapView, [program.view]);\r\n    const setState = partialApply(2, mapSetState, [program.setState]);\r\n    return new Program$4(init, uncurry(2, update), partialApply(1, mapSubscribe, [program.subscribe]), uncurry(2, view), uncurry(2, setState), program.onError, uncurry(2, (x) => x));\r\n}\r\n\r\nexport function ProgramModule_runWith(arg, program) {\r\n    const patternInput = program.init(arg);\r\n    const model = patternInput[0];\r\n    const rb = RingBuffer$1_$ctor_Z524259A4(10);\r\n    let reentered = false;\r\n    let state = model;\r\n    const dispatch = (msg) => {\r\n        let clo1;\r\n        if (reentered) {\r\n            RingBuffer$1__Push_2B595(rb, msg);\r\n        }\r\n        else {\r\n            reentered = true;\r\n            let nextMsg = some(msg);\r\n            while (nextMsg != null) {\r\n                const msg_1 = value_1(nextMsg);\r\n                try {\r\n                    const patternInput_1 = program.update(msg_1, state);\r\n                    const model$0027 = patternInput_1[0];\r\n                    program.setState(model$0027, syncDispatch);\r\n                    Cmd_exec(syncDispatch, patternInput_1[1]);\r\n                    state = model$0027;\r\n                }\r\n                catch (ex) {\r\n                    program.onError([(clo1 = toText(printf(\"Unable to process the message: %A\")), clo1(msg_1)), ex]);\r\n                }\r\n                nextMsg = RingBuffer$1__Pop(rb);\r\n            }\r\n            reentered = false;\r\n        }\r\n    };\r\n    const syncDispatch = partialApply(1, program.syncDispatch, [dispatch]);\r\n    program.setState(model, syncDispatch);\r\n    let sub;\r\n    try {\r\n        sub = program.subscribe(model);\r\n    }\r\n    catch (ex_1) {\r\n        program.onError([\"Unable to subscribe:\", ex_1]);\r\n        sub = Cmd_none();\r\n    }\r\n    const cmd_2 = append(sub, patternInput[1]);\r\n    Cmd_exec(syncDispatch, cmd_2);\r\n}\r\n\r\nexport function ProgramModule_run(program) {\r\n    ProgramModule_runWith(void 0, program);\r\n}\r\n\r\n","import { Record } from \"../fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { obj_type, record_type, bool_type, lambda_type, class_type, unit_type } from \"../fable-library.3.0.0-nagareyama-rc-005/Reflection.js\";\r\nimport { Component } from \"react\";\r\nimport * as react from \"react\";\r\nimport { equalArrays, equals } from \"../fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\n\r\nexport class LazyProps$1 extends Record {\r\n    constructor(model, render, equal) {\r\n        super();\r\n        this.model = model;\r\n        this.render = render;\r\n        this.equal = equal;\r\n    }\r\n}\r\n\r\nexport function LazyProps$1$reflection(gen0) {\r\n    return record_type(\"Elmish.React.LazyProps`1\", [gen0], LazyProps$1, () => [[\"model\", gen0], [\"render\", lambda_type(unit_type, class_type(\"Fable.React.ReactElement\"))], [\"equal\", lambda_type(gen0, lambda_type(gen0, bool_type))]]);\r\n}\r\n\r\nexport class Components_LazyView$1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    shouldComponentUpdate(nextProps, _nextState) {\r\n        const this$ = this;\r\n        const value = (this$.props).equal((this$.props).model, nextProps.model);\r\n        return !value;\r\n    }\r\n    render() {\r\n        const this$ = this;\r\n        return (this$.props).render();\r\n    }\r\n}\r\n\r\nexport function Components_LazyView$1$reflection(gen0) {\r\n    return class_type(\"Elmish.React.Components.LazyView`1\", [gen0], Components_LazyView$1, class_type(\"Fable.React.Component`2\", [LazyProps$1$reflection(gen0), obj_type]));\r\n}\r\n\r\nexport function Components_LazyView$1_$ctor_Z7829D94B(props) {\r\n    return new Components_LazyView$1(props);\r\n}\r\n\r\nexport function Common_lazyViewWith(equal, view, state) {\r\n    const props = new LazyProps$1(state, () => view(state), equal);\r\n    let comp;\r\n    comp = Components_LazyView$1;\r\n    return react.createElement(comp, props);\r\n}\r\n\r\nexport function Common_lazyView2With(equal, view, state, dispatch) {\r\n    const props = new LazyProps$1(state, () => view(state, dispatch), equal);\r\n    let comp;\r\n    comp = Components_LazyView$1;\r\n    return react.createElement(comp, props);\r\n}\r\n\r\nexport function Common_lazyView3With(equal, view, state1, state2, dispatch) {\r\n    const props = new LazyProps$1([state1, state2], () => view(state1, state2, dispatch), equal);\r\n    let comp;\r\n    comp = Components_LazyView$1;\r\n    return react.createElement(comp, props);\r\n}\r\n\r\nexport function Common_lazyView(view) {\r\n    return (state) => Common_lazyViewWith(equals, view, state);\r\n}\r\n\r\nexport function Common_lazyView2(view) {\r\n    return (state) => ((dispatch) => Common_lazyView2With(equals, view, state, dispatch));\r\n}\r\n\r\nexport function Common_lazyView3(view) {\r\n    return (state1) => ((state2) => ((dispatch) => Common_lazyView3With(equalArrays, view, state1, state2, dispatch)));\r\n}\r\n\r\n","import { ProgramModule_view, ProgramModule_withSetState } from \"../Fable.Elmish.3.0.0/program.fs.js\";\r\nimport * as react$002Ddom from \"react-dom\";\r\nimport { uncurry } from \"../fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { Common_lazyView2With } from \"./common.fs.js\";\r\n\r\nexport function Program_Internal_withReactBatchedUsing(lazyView2With, placeholderId, program) {\r\n    let lastRequest = void 0;\r\n    return ProgramModule_withSetState((model, dispatch) => {\r\n        if (lastRequest != null) {\r\n            const r = lastRequest;\r\n            window.cancelAnimationFrame(r);\r\n        }\r\n        lastRequest = window.requestAnimationFrame((_arg1) => {\r\n            react$002Ddom.render(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n        });\r\n    }, program);\r\n}\r\n\r\nexport function Program_Internal_withReactSynchronousUsing(lazyView2With, placeholderId, program) {\r\n    return ProgramModule_withSetState((model, dispatch) => {\r\n        react$002Ddom.render(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n    }, program);\r\n}\r\n\r\nexport function Program_Internal_withReactHydrateUsing(lazyView2With, placeholderId, program) {\r\n    return ProgramModule_withSetState((model, dispatch) => {\r\n        react$002Ddom.hydrate(lazyView2With((x, y) => (x === y), uncurry(2, ProgramModule_view(program)), model, dispatch), document.getElementById(placeholderId));\r\n    }, program);\r\n}\r\n\r\nexport function Program_withReactBatched(placeholderId, program) {\r\n    return Program_Internal_withReactBatchedUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactSynchronous(placeholderId, program) {\r\n    return Program_Internal_withReactSynchronousUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReact(placeholderId, program) {\r\n    return Program_Internal_withReactBatchedUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactUnoptimized(placeholderId, program) {\r\n    return Program_Internal_withReactSynchronousUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\nexport function Program_withReactHydrate(placeholderId, program) {\r\n    return Program_Internal_withReactHydrateUsing(Common_lazyView2With, placeholderId, program);\r\n}\r\n\r\n","import { Union, Record } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Types.js\";\r\nimport { union_type, record_type, string_type } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Reflection.js\";\r\nimport { formatDocument, parse, HtmlDocument$reflection } from \"./Html2Feliz.fs.js\";\r\nimport { join, interpolate, toText } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/String.js\";\r\nimport { reactApi, reactElement, mkAttr } from \"./.fable/Feliz.1.16.0/Interop.fs.js\";\r\nimport { singleton, ofArray } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/List.js\";\r\nimport { equals, createObj } from \"./.fable/fable-library.3.0.0-nagareyama-rc-005/Util.js\";\r\nimport { Helpers_combineClasses } from \"./.fable/Feliz.Bulma.2.4.0/ElementBuilders.fs.js\";\r\nimport { ProgramModule_run, ProgramModule_withConsoleTrace, ProgramModule_mkSimple } from \"./.fable/Fable.Elmish.3.0.0/program.fs.js\";\r\nimport { Program_withReactSynchronous } from \"./.fable/Fable.Elmish.React.3.0.1/react.fs.js\";\r\nimport \"./styles/main.scss\";\r\n\r\n\r\nexport class Model extends Record {\r\n    constructor(Input, Output) {\r\n        super();\r\n        this.Input = Input;\r\n        this.Output = Output;\r\n    }\r\n}\r\n\r\nexport function Model$reflection() {\r\n    return record_type(\"App.Model\", [], Model, () => [[\"Input\", string_type], [\"Output\", HtmlDocument$reflection()]]);\r\n}\r\n\r\nexport class Msg extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"InputChanged\", \"Convert\"];\r\n    }\r\n}\r\n\r\nexport function Msg$reflection() {\r\n    return union_type(\"App.Msg\", [], Msg, () => [[[\"Item\", string_type]], []]);\r\n}\r\n\r\nexport const example = \"\\r\\n\\u003cdiv class=\\\"container\\\"\\u003e\\r\\n  \\u003cdiv class=\\\"notification is-primary\\\"\\u003e\\r\\n    This container is \\u003cstrong\\u003ecentered\\u003c/strong\\u003e on desktop and larger viewports.\\r\\n  \\u003c/div\\u003e\\r\\n\\u003c/div\\u003e\\r\\n\";\r\n\r\nexport const exampl2 = \"\\r\\n\\u003cnav class=\\\"level\\\"\\u003e\\r\\n  \\u003cdiv class=\\\"level-left\\\"\\u003e\\r\\n    \\u003cdiv class=\\\"level-item\\\"\\u003e\\r\\n      \\u003cp class=\\\"subtitle is-5\\\"\\u003e\\u003cstrong\\u003e123\\u003c/strong\\u003e posts\\u003c/p\\u003e\\r\\n    \\u003c/div\\u003e\\r\\n    \\u003cdiv class=\\\"level-item\\\"\\u003e\\r\\n      \\u003cdiv class=\\\"field has-addons\\\"\\u003e\\r\\n        \\u003cp class=\\\"control\\\"\\u003e\\r\\n          \\u003cinput class=\\\"input\\\" type=\\\"text\\\" placeholder=\\\"Find a post\\\" /\\u003e\\r\\n        \\u003c/p\\u003e\\r\\n        \\u003cp class=\\\"control\\\"\\u003e\\r\\n          \\u003cbutton class=\\\"button\\\"\\u003eSearch\\u003c/button\\u003e\\r\\n        \\u003c/p\\u003e\\r\\n      \\u003c/div\\u003e\\r\\n    \\u003c/div\\u003e\\r\\n  \\u003c/div\\u003e\\r\\n  \\u003cdiv class=\\\"level-right\\\"\\u003e\\r\\n    \\u003cp class=\\\"level-item\\\"\\u003e\\u003cstrong\\u003eAll\\u003c/strong\\u003e\\u003c/p\\u003e\\r\\n    \\u003cp class=\\\"level-item\\\"\\u003e\\u003ca\\u003ePublished\\u003c/a\\u003e\\u003c/p\\u003e\\r\\n    \\u003cp class=\\\"level-item\\\"\\u003e\\u003ca\\u003eDrafts\\u003c/a\\u003e\\u003c/p\\u003e\\r\\n    \\u003cp class=\\\"level-item\\\"\\u003e\\u003ca\\u003eDeleted\\u003c/a\\u003e\\u003c/p\\u003e\\r\\n    \\u003cp class=\\\"level-item\\\"\\u003e\\u003ca class=\\\"button is-success\\\"\\u003eNew\\u003c/a\\u003e\\u003c/p\\u003e\\r\\n  \\u003c/div\\u003e\\r\\n\\u003c/nav\\u003e\\r\\n\";\r\n\r\nexport function init() {\r\n    return new Model(example, parse(example));\r\n}\r\n\r\nexport function update(msg, model) {\r\n    if (msg.tag === 1) {\r\n        const Output = parse(model.Input);\r\n        return new Model(model.Input, Output);\r\n    }\r\n    else {\r\n        return new Model(msg.fields[0], model.Output);\r\n    }\r\n}\r\n\r\nexport function Extensions_copyToClipboard(nodeId) {\r\n    const node = document.querySelector(toText(interpolate(\"#%P()\", [nodeId])));\r\n    const range = document.createRange();\r\n    range.selectNode(node);\r\n    window.getSelection().addRange(range);\r\n    try {\r\n        const value = document.execCommand(\"copy\");\r\n        void value;\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n    catch (matchValue) {\r\n    }\r\n}\r\n\r\nexport function view(model, dispatch) {\r\n    let elems_3, xs, elms_2, elms, arg00, props, value_6, xs_2, xs_3, xs_4, elms_1, arg00_2, props_1, value_16, arg00_1, strings, xs_6, xs_7, xs_8, xs_9;\r\n    const props_2 = ofArray([mkAttr(\"className\", \"is-fluid\"), (elems_3 = [(xs = ofArray([mkAttr(\"className\", \"title is-1\"), mkAttr(\"children\", \"Html2Feliz\")]), reactElement(\"h1\", createObj(xs))), (elms_2 = ofArray([(elms = ofArray([(arg00 = (props = ofArray([mkAttr(\"rows\", 25), mkAttr(\"cols\", 80), (value_6 = model.Input, mkAttr(\"ref\", (e) => {\r\n        let value_8;\r\n        if ((value_8 = (e == null), (!value_8)) ? (!equals(e.value, value_6)) : false) {\r\n            e.value = value_6;\r\n        }\r\n    })), mkAttr(\"onChange\", (ev) => {\r\n        const arg = ev.target.value;\r\n        dispatch((new Msg(0, arg)));\r\n    })]), (xs_2 = Helpers_combineClasses(\"textarea\", props), reactElement(\"textarea\", createObj(xs_2)))), (reactElement(\"div\", createObj(singleton([\"children\", [arg00]]))))), (xs_3 = ofArray([mkAttr(\"children\", \"Convert\"), mkAttr(\"onClick\", (_arg1) => {\r\n        dispatch(new Msg(1));\r\n    })]), reactElement(\"button\", createObj(xs_3)))]), (xs_4 = ofArray([mkAttr(\"className\", \"column\"), mkAttr(\"children\", reactApi.Children.toArray(Array.from(elms)))]), reactElement(\"div\", createObj(xs_4)))), (elms_1 = ofArray([(arg00_2 = (props_1 = ofArray([mkAttr(\"id\", \"output\"), mkAttr(\"rows\", 25), mkAttr(\"cols\", 80), (value_16 = (arg00_1 = (strings = formatDocument(4, model.Output), (join(\"\\n\", strings))), (reactElement(\"pre\", createObj(singleton([\"children\", [arg00_1]]))))), mkAttr(\"children\", value_16))]), (xs_6 = Helpers_combineClasses(\"box\", props_1), reactElement(\"div\", createObj(xs_6)))), (reactElement(\"div\", createObj(singleton([\"children\", [arg00_2]]))))), (xs_7 = ofArray([mkAttr(\"children\", \"Copy\"), mkAttr(\"onClick\", (_arg2) => {\r\n        Extensions_copyToClipboard(\"output\");\r\n    })]), reactElement(\"button\", createObj(xs_7)))]), (xs_8 = ofArray([mkAttr(\"className\", \"column\"), mkAttr(\"children\", reactApi.Children.toArray(Array.from(elms_1)))]), reactElement(\"div\", createObj(xs_8))))]), (xs_9 = ofArray([mkAttr(\"className\", \"columns\"), mkAttr(\"children\", reactApi.Children.toArray(Array.from(elms_2)))]), reactElement(\"div\", createObj(xs_9))))], mkAttr(\"children\", reactApi.Children.toArray(Array.from(elems_3))))]);\r\n    const xs_11 = Helpers_combineClasses(\"container\", props_2);\r\n    return reactElement(\"div\", createObj(xs_11));\r\n}\r\n\r\n(function () {\r\n    let program_2;\r\n    let program_1;\r\n    const program = ProgramModule_mkSimple(init, update, view);\r\n    program_1 = Program_withReactSynchronous(\"feliz-app\", program);\r\n    program_2 = ProgramModule_withConsoleTrace(program_1);\r\n    ProgramModule_run(program_2);\r\n})();\r\n\r\n"],"sourceRoot":""}